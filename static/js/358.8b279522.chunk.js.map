{"version":3,"file":"static/js/358.8b279522.chunk.js","mappings":"uMACA,G,QAA4B,8BAA5B,EAA0E,kCAA1E,EAAqH,0BAArH,EAA0J,4BAA1J,EAAiM,4BAAjM,EAAuO,2B,kBCkBvO,EAVqB,SAACA,GAClB,IAAIC,EAAO,cAAgBD,EAAME,GAEjC,OACI,gBAAKC,UAAWC,EAAa,IAAMA,EAAnC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCHtC,EAJgB,SAACN,GACb,OAAO,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMO,W,6BCIvCC,GAAcC,EAAAA,EAAAA,GAAiB,IAerC,GAAeC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,0BAApD,EAbgF,SAACX,GAC7E,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAA6B,qBAAsB,aAAc,CAACC,EAAAA,EAAUP,GAAcQ,EAAAA,OAE/F,0BACI,mBAAQb,UAAW,SAAnB,0BCahB,EAtBkB,SAACH,GAEf,IAAIiB,EAAQjB,EAAMkB,cAEdC,EAAoBF,EAAMG,UAAUC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAchB,KAAMgB,EAAEhB,KAAiBJ,GAAIoB,EAAEpB,IAAZoB,EAAEpB,OAChFqB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASlB,QAASkB,EAAElB,aAMnE,OACI,iBAAKJ,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAmCe,KACnC,iBAAKhB,UAAWC,EAAhB,WACI,yBAAMmB,KACN,SAAC,EAAD,CAAgBX,SATR,SAACc,GACjB1B,EAAM2B,YAAYD,EAAOE,sBCejC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAhBoB,SAACb,GACrB,MAAO,CACHC,cAAeD,EAAMC,kBAIF,SAACa,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAQpCK,EAAAA,EAFJ,CAGEC,I,gIC7BEC,EAA6B,SAAClB,GAAD,MAAiC,CAC9DmB,OAAQnB,EAAMoB,KAAKD,SAIhB,SAASH,EAAoBK,GAWhC,OAFqCR,EAAAA,EAAAA,IAAoCK,EAA4B,GAAhEL,EAPX,SAAC9B,GACvB,IAAKoC,EAAwBpC,EAAxBoC,OAAWG,GAAhB,OAA6BvC,EAA7B,GACA,OAAKoC,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUlC,GAAI","sources":["webpack://samurai-way/./src/components/dialogues/dialogues.module.css?4d19","components/dialogues/dialogue-item/DialogueItem.tsx","components/dialogues/message/Message.tsx","components/dialogues/add-message-form/AddMessageForm.tsx","components/dialogues/Dialogues.tsx","components/dialogues/DialoguesContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogues\":\"dialogues_dialogues__J40Pe\",\"dialoguesItems\":\"dialogues_dialoguesItems__7kz1M\",\"active\":\"dialogues_active__9nJaU\",\"dialogue\":\"dialogues_dialogue__idJN5\",\"messages\":\"dialogues_messages__H1j45\",\"message\":\"dialogues_message__2QFef\"};","import React from \"react\";\r\nimport s from \"../dialogues.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype Props = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogueItem = (props: Props) => {\r\n    let path = \"/dialogues/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialogue + \" \" + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogueItem;","import React from \"react\";\r\nimport s from \"../dialogues.module.css\";\r\n\r\ntype Props = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: Props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, TextArea} from \"components/common/forms-controls/FormsControls\";\r\nimport {AddFormData} from \"components/dialogues/Dialogues\";\r\n\r\n\r\n\r\ntype AddFormDataKeys = keyof AddFormData\r\n\r\ntype Props = {}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddFormData, Props> & Props> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddFormDataKeys>(\"Enter your message\", \"newMessage\", [required, maxLength50], TextArea)}\r\n            </div>\r\n            <div>\r\n                <button className={'button'}>SEND</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddFormData, Props>({form: 'dialogueAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport s from './dialogues.module.css'\r\nimport DialogueItem from \"components/dialogues/dialogue-item/DialogueItem\";\r\nimport {DialoguesPropsType} from \"components/dialogues/DialoguesContainer\";\r\nimport Message from \"components/dialogues/message/Message\";\r\nimport AddMessageForm from \"components/dialogues/add-message-form/AddMessageForm\";\r\n\r\n\r\nexport type AddFormData = {\r\n    newMessage: string\r\n}\r\n\r\nconst Dialogues = (props: DialoguesPropsType) => {\r\n\r\n    let state = props.dialoguesPage;\r\n\r\n    let dialoguesElements = state.dialogues.map(d => <DialogueItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>)\r\n\r\n    let addNewMessage = (values: AddFormData) => {\r\n        props.sendMessage(values.newMessage);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogues}>\r\n            <div className={s.dialoguesItems}>{dialoguesElements}</div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogues;","import React from \"react\";\r\nimport {DialoguesPageType, sendMessageCreator} from \"redux/dialoguesReducer\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport Dialogues from \"components/dialogues/Dialogues\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialoguesPage: DialoguesPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type DialoguesPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialoguesPage: state.dialoguesPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessage: string) => {\r\n            dispatch(sendMessageCreator(newMessage));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogues)\r\n","import { Navigate } from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype Props = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): Props => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: Props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>;\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<Props, {}, T, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["props","path","id","className","s","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","TextArea","state","dialoguesPage","dialoguesElements","dialogues","map","d","messagesElements","messages","m","values","sendMessage","newMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogues","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}