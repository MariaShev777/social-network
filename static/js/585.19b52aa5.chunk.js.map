{"version":3,"file":"static/js/585.19b52aa5.chunk.js","mappings":"yKAcA,UARiB,WACb,OACI,0BACI,SAACA,EAAD,OAQZ,IAAMA,EAAO,WACT,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,UAEd,KAGC,2BACgB,UAAXN,IAAsB,2EACvB,iCACI,SAACO,EAAD,KACA,SAACC,EAAD,WAOVD,EAAWE,EAAAA,MAAW,WACxB,IAAMC,GAAWT,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKO,YAC3DC,GAAcC,EAAAA,EAAAA,QAAuB,MAC3C,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAqBC,EAArB,KAkBA,OAPAX,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdU,IACA,UAAAH,EAAYK,eAAZ,SAAqBC,eAAe,CAACC,SAAU,cAEpD,CAACR,KAIA,iBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAjBhC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAc,GAE/BD,GAAgBC,GAAc,IAYlC,UACKL,EAASqB,KAAI,SAACC,GAAD,OAAO,SAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,QACrC,gBAAKC,IAAKzB,UAMhBsB,EAAU,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,QACd,OACI,iBAAKf,MAAO,CAACkB,MAAO,SAApB,WACI,gBAAKC,IAAKJ,EAAQK,MAAOC,MAAO,MAChC,uBAAIN,EAAQO,WACXP,EAAQA,SACT,sBAMN1B,EAAiB,WACnB,OAA8BK,EAAAA,EAAAA,UAAS,IAAvC,eAAOqB,EAAP,KAAgBQ,EAAhB,KACM1C,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDF,GAAWC,EAAAA,EAAAA,MASjB,OACI,4BACI,0BACI,qBAAU4C,SAAU,SAACpB,GAAD,OAAOmB,EAAWnB,EAAEE,cAAcmB,QAAQA,MAAOV,OAEzE,0BACI,mBAAQW,SAAqB,UAAX7C,EAAoB8C,QAZvB,WAClBZ,IACLpC,GAASiD,EAAAA,EAAAA,IAAYb,IACrBQ,EAAW,MASH","sources":["pages/chat/ChatPage.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {ChatMessageAPIType} from \"api/chatApi\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"redux/chatReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"redux/store\";\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage\r\n\r\n\r\nconst Chat = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Messages = React.memo(() => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesRef}></div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nconst Message = ({message}: { message: ChatMessageAPIType }) => {\r\n    return (\r\n        <div style={{color: 'black'}}>\r\n            <img src={message.photo} width={36}/>\r\n            <b>{message.userName}</b>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst AddMessageForm = () => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","React","messages","messagesRef","useRef","useState","isAutoScroll","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","color","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}